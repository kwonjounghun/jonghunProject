---
description: 
globs: 
alwaysApply: false
---
# Design System Package - Cursor Rules

You are an expert in building design systems using Radix UI primitives and vanilla-extract styling. Follow these strict architectural patterns and requirements for the [packages/ui](mdc:packages/ui) package.

## Project Structure Reference

### Current UI Package Structure
```
packages/ui/
├── .storybook/                    # Storybook 설정 디렉토리
│   ├── main.ts                    # Storybook 메인 설정
│   ├── preview.ts                 # Storybook 프리뷰 설정
│   ├── manager.ts                 # Storybook 매니저 설정
│   └── preview-head.html          # Storybook 헤드 HTML
├── src/
│   ├── components/
│   │   ├── Button/
│   │   │   ├── Button.css.ts
│   │   │   ├── Button.tsx
│   │   │   ├── Button.stories.tsx # Storybook stories
│   │   │   ├── Button.test.tsx    # Component tests
│   │   │   └── index.ts
│   │   ├── Card/
│   │   │   ├── Card.css.ts
│   │   │   ├── Card.tsx
│   │   │   ├── Card.stories.tsx   # Storybook stories
│   │   │   ├── Card.test.tsx      # Component tests
│   │   │   └── index.ts
│   │   ├── Input/
│   │   │   ├── Input.css.ts
│   │   │   ├── Input.tsx
│   │   │   ├── Input.stories.tsx  # Storybook stories
│   │   │   ├── Input.test.tsx     # Component tests
│   │   │   └── index.ts
│   │   ├── Toast/
│   │   │   ├── Toast.css.ts
│   │   │   ├── Toast.tsx
│   │   │   ├── Toast.stories.tsx  # Storybook stories
│   │   │   ├── Toast.test.tsx     # Component tests
│   │   │   ├── index.ts
│   │   │   └── README.md
│   │   └── index.ts
│   ├── providers/
│   │   ├── ThemeProvider.tsx
│   │   ├── ToastProvider.tsx
│   │   └── index.ts
│   ├── styles/
│   │   ├── global.css.ts
│   │   ├── index.ts
│   │   ├── sprinkles.css.ts
│   │   ├── theme.css.ts
│   │   └── tokens.css.ts
│   └── index.ts
├── __tests__/                     # 통합 테스트 디렉토리
│   ├── setup.ts                   # 테스트 설정
│   ├── utils.ts                   # 테스트 유틸리티
│   └── integration/               # 통합 테스트
├── .eslintrc.js                   # ESLint 설정
├── .prettierrc                    # Prettier 설정
├── jest.config.js                 # Jest 설정
├── package.json
└── tsconfig.json
```

### Key Files Reference
- Main package entry: [packages/ui/src/index.ts](mdc:packages/ui/src/index.ts)
- Theme system: [packages/ui/src/styles/theme.css.ts](mdc:packages/ui/src/styles/theme.css.ts)
- Global styles: [packages/ui/src/styles/global.css.ts](mdc:packages/ui/src/styles/global.css.ts)
- Design tokens: [packages/ui/src/styles/tokens.css.ts](mdc:packages/ui/src/styles/tokens.css.ts)
- Theme provider: [packages/ui/src/providers/ThemeProvider.tsx](mdc:packages/ui/src/providers/ThemeProvider.tsx)
- Toast provider: [packages/ui/src/providers/ToastProvider.tsx](mdc:packages/ui/src/providers/ToastProvider.tsx)

## Core Architecture Requirements

### 1. Component Foundation - MANDATORY
- **ALWAYS** use Radix UI primitives as the foundation for ALL interactive components
- **NEVER** build interactive components from scratch - extend Radix primitives only
- Leverage Radix's built-in accessibility features, keyboard navigation, and focus management
- Use Radix's compound component patterns for complex UI elements

### 2. Styling System - MANDATORY
- **EXCLUSIVELY** use vanilla-extract for all styling - no exceptions
- **NEVER** use CSS-in-JS libraries other than vanilla-extract (no styled-components, emotion, etc.)
- Organize styles using vanilla-extract's `.css.ts` files
- Use vanilla-extract recipes for component variants and states
- Implement design tokens using vanilla-extract's contract system

### 3. Dark Mode Support - REQUIRED
- **EVERY** component must support both light and dark themes
- Use vanilla-extract's theme contracts with CSS custom properties
- Define comprehensive theme contracts for consistent color usage
- Implement theme switching without FOUC (Flash of Unstyled Content)
- Test all components in both light and dark modes before completion

### 4. Responsive Design - MANDATORY
- **ALL** components must be responsive by default
- Use vanilla-extract's responsive utilities and breakpoints
- Implement mobile-first responsive design approach
- Support breakpoints: mobile (320px+), tablet (768px+), desktop (1024px+)
- Ensure touch-friendly interactions on mobile devices

## Implementation Pattern

### Component Structure Template
```typescript
// [ComponentName].tsx
// 반드시 Radix Primitive, vanilla-extract recipe, forwardRef, clsx, theme를 사용하여 구조만 선언
// 실제 구현 내용은 작성하지 않음
```

### Storybook Story Template - MANDATORY
```typescript
// [ComponentName].stories.tsx
// Meta, StoryObj, 필수 스토리(기본, variant, size, disabled, playground) 구조만 선언
// 실제 구현 내용은 작성하지 않음
```

### Test File Template - MANDATORY
```typescript
// [ComponentName].test.tsx
// describe, test, render, userEvent, axe 등 테스트 구조만 선언
// 실제 테스트 구현 내용은 작성하지 않음
```

### Theme System Requirements
```typescript
// theme.css.ts
// createTheme, createThemeContract, themeContract, lightTheme, darkTheme, theme 구조만 선언
// 실제 값, 구현 내용은 작성하지 않음
```

### Interactive States - REQUIRED
```typescript
// interactiveStyles 객체의 상태(hover, focus, active, disabled) 구조만 선언
// 실제 스타일 구현 내용은 작성하지 않음
```

### Testing Standards by Component Type
```typescript
// describe, test 등 테스트 구조만 선언
// 실제 테스트 구현 내용은 작성하지 않음
```

### Storybook Documentation Standards
```typescript
// Meta, StoryObj, 필수 스토리 구조만 선언
// 실제 구현 내용은 작성하지 않음
```

## File Organization Standard
```
packages/ui/
├── .storybook/                    # Storybook 설정 디렉토리
│   ├── main.ts                    # Storybook 메인 설정
│   ├── preview.ts                 # Storybook 프리뷰 설정
│   ├── manager.ts                 # Storybook 매니저 설정
│   └── preview-head.html          # Storybook 헤드 HTML
├── src/
│   ├── components/
│   │   ├── [ComponentName]/
│   │   │   ├── index.ts           # Re-exports
│   │   │   ├── [ComponentName].tsx        # Component implementation
│   │   │   ├── [ComponentName].css.ts     # Vanilla-extract styles
│   │   │   ├── [ComponentName].stories.tsx # Storybook stories
│   │   │   └── [ComponentName].test.tsx   # Component tests
│   │   └── index.ts               # Main component exports
│   ├── styles/
│   │   ├── theme.css.ts           # Theme contracts and implementations
│   │   ├── global.css.ts          # Global styles
│   │   ├── tokens.css.ts          # Design tokens
│   │   └── sprinkles.css.ts       # Style utilities
│   ├── providers/
│   │   ├── ThemeProvider.tsx      # Theme context provider
│   │   ├── ToastProvider.tsx      # Toast context provider
│   │   └── index.ts               # Provider exports
│   └── index.ts                   # Package exports
├── __tests__/                     # 통합 테스트 디렉토리
│   ├── setup.ts                   # 테스트 설정
│   ├── utils.ts                   # 테스트 유틸리티
│   └── integration/               # 통합 테스트
├── .eslintrc.js                   # ESLint 설정
├── .prettierrc                    # Prettier 설정
├── jest.config.js                 # Jest 설정
├── tsconfig.json                  # TypeScript 설정
└── package.json                   # Package 설정 및 스크립트
```

### Key Files Reference - UPDATED
- Main package entry: [packages/ui/src/index.ts](mdc:packages/ui/src/index.ts)
- Theme system: [packages/ui/src/styles/theme.css.ts](mdc:packages/ui/src/styles/theme.css.ts)
- Global styles: [packages/ui/src/styles/global.css.ts](mdc:packages/ui/src/styles/global.css.ts)
- Design tokens: [packages/ui/src/styles/tokens.css.ts](mdc:packages/ui/src/styles/tokens.css.ts)
- Theme provider: [packages/ui/src/providers/ThemeProvider.tsx](mdc:packages/ui/src/providers/ThemeProvider.tsx)
- Toast provider: [packages/ui/src/providers/ToastProvider.tsx](mdc:packages/ui/src/providers/ToastProvider.tsx)
- Storybook config: [packages/ui/.storybook/main.ts](mdc:packages/ui/.storybook/main.ts)
- Jest config: [packages/ui/jest.config.js](mdc:packages/ui/jest.config.js)
- ESLint config: [packages/ui/.eslintrc.js](mdc:packages/ui/.eslintrc.js)

## Quality Standards

### Accessibility Checklist - MANDATORY
- [ ] Leverages Radix's built-in accessibility features
- [ ] Proper ARIA labels and descriptions provided
- [ ] Keyboard navigation functions correctly
- [ ] Focus management works as expected
- [ ] Color contrast meets WCAG AA standards (4.5:1 minimum)
- [ ] Supports screen readers
- [ ] Respects `prefers-reduced-motion`

### Interactive States - REQUIRED
```typescript
// All interactive components must include these states
const interactiveStyles = {
  // Base state
  cursor: 'pointer',
  transition: 'all 0.2s ease-in-out',
  
  // Hover state
  ':hover': {
    // Hover styles using theme colors
  },
  
  // Focus state
  ':focus-visible': {
    // Focus styles with proper outline
  },
  
  // Active state
  ':active': {
    // Active state styles
  },
  
  // Disabled state
  ':disabled': {
    opacity: 0.5,
    cursor: 'not-allowed',
    pointerEvents: 'none'
  }
};
```

## Strict Prohibitions

### ❌ NEVER DO THESE
- Use CSS-in-JS libraries other than vanilla-extract
- Create interactive components without Radix primitives
- Hardcode colors, spacing, or typography values
- Skip responsive design implementation
- Ignore dark mode requirements
- Use inline styles or style props
- Bypass Radix accessibility features
- Create components that don't follow the established pattern
- **Skip Storybook story creation for any component**
- **Skip test file creation for any component**
- **Use testing libraries other than React Testing Library and Jest**
- **Create components without comprehensive accessibility testing**
- **Ignore visual regression testing requirements**

### ❌ FORBIDDEN IMPORTS
```typescript
// These imports are FORBIDDEN
import styled from 'styled-components';     // ❌
import { css } from '@emotion/react';       // ❌
import { makeStyles } from '@material-ui/core'; // ❌

// Testing libraries - ONLY use approved ones
import { render } from 'enzyme';            // ❌
import { mount } from 'enzyme';             // ❌
import { shallow } from 'enzyme';           // ❌
import { render as renderRTL } from '@testing-library/react'; // ✅ APPROVED
```

## Development Workflow - MANDATORY PROCESS

### Phase 1: Planning & Preparation
1. **Feature Conflict Check**: ALWAYS verify no existing overlapping functionality exists in [packages/ui/src/components](mdc:packages/ui/src/components)
2. **Branch Creation**: Create a new feature branch following naming convention: `feat/component-name` or `feat/component-enhancement`
3. **Radix Primitive Investigation**: Research if Radix UI provides the required functionality
   - If available: Plan to import and style Radix primitive
   - If unavailable: Study similar Radix implementations to maintain consistency with Radix philosophy

### Phase 2: Architecture & Design Pattern Compliance
4. **Atomic Design Pattern**: MANDATORY adherence to atomic design principles
   - Atoms: Basic building blocks (buttons, inputs, labels)
   - Molecules: Simple combinations of atoms (form groups, navigation items)
   - Organisms: Complex UI components (forms, headers, modals)
   - Templates: Page-level layouts
   - Pages: Specific instances of templates

### Phase 3: Implementation
5. **Component Development**:
   - Implement functionality according to established patterns
   - Apply styling using vanilla-extract exclusively
   - Ensure responsive design and dark mode support
   - Follow TypeScript typing standards

### Phase 4: Documentation & Testing
6. **Storybook Creation**: MANDATORY for every component
   - Write comprehensive component stories
   - Include design purpose and usage guidelines
   - Maintain change history documentation
   - Create detailed Args configuration with Controls for all dynamic/user-input props
   - Document all use cases and variants

### Phase 5: Quality Assurance
7. **Test Implementation**: Write comprehensive test cases covering:
   - Component functionality
   - User interactions
   - Accessibility compliance
   - Responsive behavior
   - Dark/light mode compatibility

### Phase 6: Version Control
8. **Commit Standards**: Create meaningful commits for each workflow phase:
   - `feat: add [component] foundation`
   - `style: implement [component] styling with vanilla-extract`
   - `docs: add [component] storybook stories and documentation`
   - `test: add [component] test suite`
   - `refactor: optimize [component] implementation`

### Phase 7: Quality Gate
9. **Workflow Compliance Check**: After each phase, verify:
   - [ ] No workflow steps were skipped
   - [ ] All requirements are met before proceeding
   - [ ] Rework incomplete items to maintain workflow integrity

### Before Starting Any Component - EXPANDED CHECKLIST
1. **Duplication Analysis**: Search existing components in [packages/ui/src/components](mdc:packages/ui/src/components) for similar functionality
2. **Radix Research**: Check Radix UI documentation for primitive availability
3. **Atomic Classification**: Determine component's position in atomic design hierarchy
4. **Branch Strategy**: Create appropriately named feature branch
5. **Dependencies Audit**: Identify required Radix primitives and vanilla-extract patterns
6. **Documentation Planning**: Outline Storybook stories and component documentation
7. **Testing Strategy**: Plan test scenarios and edge cases

### Component Completion Checklist - ENHANCED
#### Technical Implementation
- [ ] Built on appropriate Radix primitive (or follows Radix philosophy if custom)
- [ ] Styled exclusively with vanilla-extract
- [ ] Supports both light and dark themes
- [ ] Responsive across all breakpoints
- [ ] Proper TypeScript types and interfaces
- [ ] All interactive states implemented
- [ ] Accessibility features verified
- [ ] Performance optimized
- [ ] Follows established file organization
- [ ] Includes proper exports in [packages/ui/src/components/index.ts](mdc:packages/ui/src/components/index.ts)

#### Documentation & Stories
- [ ] Storybook stories created with comprehensive examples
- [ ] Component purpose and design rationale documented
- [ ] Usage guidelines and best practices documented
- [ ] Change history maintained
- [ ] Args configuration with Controls for dynamic props
- [ ] All use cases and variants demonstrated

#### Testing & Quality
- [ ] Unit tests covering functionality
- [ ] Integration tests for user interactions
- [ ] Accessibility tests implemented
- [ ] Visual regression tests added
- [ ] Performance benchmarks verified

#### Process Compliance
- [ ] Followed atomic design classification
- [ ] No functionality duplication with existing components
- [ ] Appropriate git commits created
- [ ] Workflow compliance verified at each phase
- [ ] All phases completed without shortcuts

## Testing Requirements - COMPREHENSIVE COVERAGE

### Test Categories - ALL MANDATORY
1. **Functional Testing**
   - Component renders correctly with default props
   - All prop variations work as expected
   - Event handlers trigger correctly
   - State management functions properly

2. **Visual Testing**
   - Component appearance in light mode
   - Component appearance in dark mode
   - Responsive behavior at all breakpoints (mobile, tablet, desktop)
   - All variant combinations render correctly

3. **Interaction Testing**
   - Mouse interactions (click, hover, drag)
   - Keyboard navigation and shortcuts
   - Touch interactions on mobile devices
   - Focus management and tab order

4. **Accessibility Testing**
   - Screen reader compatibility
   - ARIA attributes and labels
   - Color contrast ratios (WCAG AA compliance)
   - Focus indicators visibility
   - Keyboard-only navigation

5. **Integration Testing**
   - Component works within different layouts
   - Plays well with other design system components
   - Theme switching functionality
   - Context provider dependencies

### Testing Standards by Component Type

#### Atoms (Basic Components)
```typescript
// Example test structure for atoms
describe('Component', () => {
  describe('Functionality', () => {
    test('renders with default props')
    test('handles click events')
    test('supports disabled state')
  });
  
  describe('Variants', () => {
    test('renders all variants correctly')
  });
  
  describe('Accessibility', () => {
    test('has proper ARIA attributes')
    test('supports keyboard navigation')
    test('meets color contrast requirements')
  });
  
  describe('Theming', () => {
    test('renders correctly in light and dark modes')
  });
});
```

#### Molecules/Organisms (Complex Components)
- Include additional tests for component composition
- Test internal state management
- Verify complex user workflows
- Test error handling and edge cases

### Test Implementation Requirements
- **Jest + React Testing Library**: Primary testing framework
- **@testing-library/jest-dom**: Enhanced DOM matchers
- **@testing-library/user-event**: User interaction simulation
- **jest-axe**: Accessibility testing
- **Storybook Test Runner**: Visual regression testing

### Performance Testing
- Component rendering performance
- Memory usage optimization
- Bundle size impact assessment
- Re-render efficiency testing

## Storybook Documentation Standards

### Story Structure - MANDATORY FORMAT
```typescript
import type { Meta, StoryObj } from '@storybook/react';
import { Component } from './component';

const meta: Meta<typeof Component> = {
  title: 'Design System/[Atomic Level]/Component Name',
  component: Component,
  parameters: {
    docs: {
      description: {
        component: `
## Purpose
Brief description of component's design purpose and when to use it.

## Usage Guidelines
- When to use this component
- When NOT to use this component
- Best practices and recommendations

## Change History
- v1.0.0: Initial implementation
- v1.1.0: Added new variant
- v1.2.0: Enhanced accessibility features
        `
      }
    }
  },
  argTypes: {
    // Detailed Args configuration for ALL dynamic props
    variant: {
      control: { type: 'select' },
      options: ['primary', 'secondary', 'destructive'],
      description: 'Visual style variant of the component'
    },
    size: {
      control: { type: 'radio' },
      options: ['sm', 'md', 'lg'],
      description: 'Size variation of the component'
    },
    disabled: {
      control: { type: 'boolean' },
      description: 'Disables component interaction'
    }
    // Include ALL user-configurable props with detailed controls
  }
};

export default meta;
type Story = StoryObj<typeof meta>;

// Default story showing primary use case
export const Default: Story = {
  args: {
    variant: 'primary',
    size: 'md',
    children: 'Button Text'
  }
};

// Stories for ALL use cases and variants
export const AllVariants: Story = {
  render: () => (
    <div style={{ display: 'flex', gap: '1rem' }}>
      <Component variant="primary">Primary</Component>
      <Component variant="secondary">Secondary</Component>
      <Component variant="destructive">Destructive</Component>
    </div>
  )
};

export const AllSizes: Story = {
  render: () => (
    <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
      <Component size="sm">Small</Component>
      <Component size="md">Medium</Component>
      <Component size="lg">Large</Component>
    </div>
  )
};

export const DisabledState: Story = {
  args: {
    disabled: true,
    children: 'Disabled Button'
  }
};

// Interactive story for testing
export const Playground: Story = {
  args: {
    variant: 'primary',
    size: 'md',
    children: 'Interactive Button'
  }
};
```

### Documentation Requirements
- **Component Purpose**: Clear explanation of design intent
- **Usage Guidelines**: When and how to use the component
- **Change History**: Version tracking and migration notes
- **Interactive Controls**: All dynamic props must have Storybook controls
- **Use Case Coverage**: Stories for every intended use case
- **Accessibility Notes**: Screen reader and keyboard interaction documentation

## Package Management

### Dependencies Management
- All Radix UI primitives should be added to [packages/ui/package.json](mdc:packages/ui/package.json)
- Vanilla-extract dependencies must be properly configured
- Ensure all dependencies are compatible with the monorepo structure

### Required Scripts - MANDATORY
```json
{
  "scripts": {
    "build": "tsup src/index.ts --format esm,cjs --dts --external react",
    "dev": "tsup src/index.ts --format esm,cjs --watch --dts --external react",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:accessibility": "jest --testPathPattern=.*\\.test\\.tsx --testNamePattern=.*accessibility.*",
    "lint": "eslint \"src/**/*.ts*\" \"**/*.stories.tsx\" \"**/*.test.tsx\"",
    "lint:fix": "eslint \"src/**/*.ts*\" \"**/*.stories.tsx\" \"**/*.test.tsx\" --fix",
    "clean": "rm -rf .turbo && rm -rf node_modules && rm -rf dist && rm -rf storybook-static"
  }
}
```

### Required Dependencies - MANDATORY
```
```

## AI Agent Request Handling Rule

- 만약 사용자가 본 디자인 시스템 룰을 기준으로 컴포넌트 구현을 요청할 경우,
  - 에이전트는 단순히 구조적 선언만으로 구현하지 않는다.
  - 아래 항목 중 하나라도 요청에 명확히 포함되어 있지 않으면, 반드시 보완하여 다시 요청한다:
    1. **구현 기준의 구체성** (필수 prop, Radix Primitive 매핑, 토큰 네이밍 등)
    2. **실제 사용 예시/샘플 시나리오** (어떤 prop 조합, 어떤 variant/size, 어떤 인터랙션 등)
    3. **테스트 기준의 구체성** (필수 테스트 시나리오, 접근성 기준 등)
    4. **디자인 토큰/테마의 최소 요구 명세** (필수 토큰, 네이밍 규칙 등)
    5. **Storybook/테스트/문서화의 품질 기준** (모든 prop Controls, 모든 variant/size 조합, 문서화 필수 항목 등)
    6. **Best Practice/Anti-Pattern 예시** (권장/비권장 패턴)
  - 위 항목 중 누락된 부분이 있다면, 에이전트는 해당 정보를 구체적으로 보완하여 사용자에게 다시 요청하거나, 예시/가이드라인을 제시한 뒤 작업을 진행한다.
  - 이 룰은 모든 컴포넌트, 스토리북, 테스트, 테마, 문서화 작업 요청에 동일하게 적용된다.