# Design System Package - Cursor Rules

## Core Principles

### 1. Component Architecture
- **ALWAYS** use Radix UI primitives as the foundation for all interactive components
- Build custom components by extending Radix primitives, never from scratch
- Leverage Radix's accessibility features and keyboard navigation
- Use Radix's compound component patterns for complex UI elements

### 2. Styling System
- **MANDATORY**: Use vanilla-extract for all styling
- Never use CSS-in-JS libraries other than vanilla-extract
- Organize styles using vanilla-extract's `.css.ts` files
- Use vanilla-extract recipes for component variants
- Implement design tokens using vanilla-extract's contract system

### 3. Dark Mode Support
- **REQUIRED**: Every component must support both light and dark themes
- Use vanilla-extract's theme system with CSS custom properties
- Define theme contracts for consistent color usage across components
- Implement theme switching without flash of unstyled content (FOUC)
- Test all components in both light and dark modes

### 4. Responsive Design
- **MANDATORY**: All components must be responsive by default
- Use vanilla-extract's responsive utilities and breakpoints
- Implement mobile-first responsive design approach
- Support common breakpoints: mobile (320px+), tablet (768px+), desktop (1024px+)
- Ensure touch-friendly interactions on mobile devices

## Implementation Guidelines

### Component Structure
```typescript
// ✅ Correct approach
import * as RadixPrimitive from '@radix-ui/react-[component]';
import { style, recipe } from '@vanilla-extract/css';
import { theme } from '../styles/theme.css';

// Define styles with vanilla-extract
export const componentStyles = recipe({
  base: {
    // Base styles with theme support
    backgroundColor: theme.colors.background,
    color: theme.colors.foreground,
    // Responsive styles
    '@media': {
      [theme.breakpoints.tablet]: {
        // Tablet styles
      },
      [theme.breakpoints.desktop]: {
        // Desktop styles
      }
    }
  },
  variants: {
    variant: {
      primary: { /* styles */ },
      secondary: { /* styles */ }
    },
    size: {
      sm: { /* styles */ },
      md: { /* styles */ },
      lg: { /* styles */ }
    }
  }
});

// Extend Radix component
const Component = React.forwardRef<
  React.ElementRef<typeof RadixPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadixPrimitive.Root> & VariantProps<typeof componentStyles>
>(({ className, variant, size, ...props }, ref) => (
  <RadixPrimitive.Root
    ref={ref}
    className={cn(componentStyles({ variant, size }), className)}
    {...props}
  />
));
```

### Styling Rules
- Use semantic naming for CSS classes and design tokens
- Implement consistent spacing using a scale (4px, 8px, 12px, 16px, 24px, 32px, 48px, 64px)
- Use relative units (rem, em) for typography and spacing
- Implement proper focus states using Radix's focus management
- Always provide hover and active states for interactive elements

### Theme System
- Define comprehensive theme contracts with proper TypeScript types
- Include both light and dark theme implementations
- Use CSS custom properties for runtime theme switching
- Organize theme tokens by category: colors, typography, spacing, shadows, borders
- Implement semantic color tokens (primary, secondary, accent, destructive, etc.)

### Accessibility Requirements
- Leverage Radix's built-in accessibility features
- Always provide proper ARIA labels and descriptions
- Ensure keyboard navigation works correctly
- Test with screen readers
- Maintain proper color contrast ratios (WCAG AA minimum)
- Support reduced motion preferences

### File Organization
```
packages/ui/src/
├── components/
│   ├── [component-name]/
│   │   ├── index.ts
│   │   ├── [component-name].tsx
│   │   └── [component-name].css.ts
├── styles/
│   ├── theme.css.ts
│   ├── tokens.css.ts
│   ├── global.css.ts
│   └── utils.css.ts
└── providers/
    └── theme-provider.tsx
```

### Development Workflow
- Always start with the appropriate Radix primitive
- Define theme-aware styles using vanilla-extract
- Implement all variants and states
- Test responsiveness across breakpoints
- Verify dark mode compatibility
- Ensure accessibility compliance
- Add comprehensive TypeScript types

## Common Patterns

### Button Component Example
```typescript
// ✅ Follow this pattern for all components
import * as RadixButton from '@radix-ui/react-slot';
import { recipe } from '@vanilla-extract/css';
import { theme } from '../styles/theme.css';

export const buttonStyles = recipe({
  base: {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: theme.radii.md,
    fontWeight: theme.fontWeights.medium,
    transition: 'all 0.2s ease-in-out',
    cursor: 'pointer',
    border: 'none',
    
    // Dark mode support
    backgroundColor: theme.colors.primary,
    color: theme.colors.primaryForeground,
    
    // Responsive padding
    padding: `${theme.space[2]} ${theme.space[4]}`,
    fontSize: theme.fontSizes.sm,
    
    '@media': {
      [theme.breakpoints.tablet]: {
        padding: `${theme.space[3]} ${theme.space[6]}`,
        fontSize: theme.fontSizes.base,
      }
    },
    
    // Interactive states
    ':hover': {
      backgroundColor: theme.colors.primaryHover,
    },
    
    ':focus-visible': {
      outline: `2px solid ${theme.colors.ring}`,
      outlineOffset: '2px',
    },
    
    ':disabled': {
      opacity: 0.5,
      cursor: 'not-allowed',
    }
  },
  
  variants: {
    variant: {
      primary: {
        backgroundColor: theme.colors.primary,
        color: theme.colors.primaryForeground,
      },
      secondary: {
        backgroundColor: theme.colors.secondary,
        color: theme.colors.secondaryForeground,
      }
    },
    size: {
      sm: {
        padding: `${theme.space[1]} ${theme.space[3]}`,
        fontSize: theme.fontSizes.xs,
      },
      md: {
        padding: `${theme.space[2]} ${theme.space[4]}`,
        fontSize: theme.fontSizes.sm,
      },
      lg: {
        padding: `${theme.space[3]} ${theme.space[6]}`,
        fontSize: theme.fontSizes.base,
      }
    }
  }
});
```

## Restrictions
- ❌ Do NOT use styled-components, emotion, or other CSS-in-JS libraries
- ❌ Do NOT create components without Radix primitives as foundation
- ❌ Do NOT hardcode colors or spacing values
- ❌ Do NOT ignore responsive design requirements
- ❌ Do NOT skip dark mode implementation
- ❌ Do NOT use inline styles
- ❌ Do NOT bypass accessibility features provided by Radix

## Quality Checklist
Before considering any component complete, verify:
- [ ] Built on appropriate Radix primitive
- [ ] Styled exclusively with vanilla-extract
- [ ] Supports both light and dark themes
- [ ] Responsive across all breakpoints
- [ ] Proper TypeScript types and interfaces
- [ ] Accessibility features maintained
- [ ] Interactive states implemented
- [ ] Performance optimized
- [ ] Consistent with design system tokens